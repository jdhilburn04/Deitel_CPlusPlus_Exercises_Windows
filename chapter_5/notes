Objectives:
- Library functions
       global functions: Has global scope (Can be used anywhere in the program)

       pow(x, y): Global math function that returns the sum of x to the y

- Declare functions
        1. Function prototype: Declare before called to ensure that compiler knows what function to call
        2. Declare Function
        return_type function_name (parameter_type parameter_variable) {
            function body
        }

- Enums
        1. Declare
            enum class Class_name{x, y, z}
                - Each enum constant has a value starting at 0 and incrementing by 1
                - x = 0
                - y = 1
                - z = 2
        2. Create an object
            Class_name class_object = Class_name::x;

        Scope: Portion of code where identifier is usable
            Block scope: Begins at the identifiers declaration ends at the right brace }
            - Static variables are block scope
            Global Namespace Scope: Identifier is known to all function after its declaration


- Recursive functions
        - Functions that call themselves














Example 1:
// Maximum Function
int maximum(int a, int b, int c); // Function prototype

int main() {

    cout << "Enter three integers: \n";
    int int1, int2, int3;
    cin >> int1 >> int2 >> int3;

    // Call maximum
    cout << "The maximum integer is: " << maximum(int1, int2, int3) << "\n";
}

int maximum(int a, int b, int c) {
    int max = a;
    if (max < b) {
        max = b;
    }
    if (max < c) {
        max = c;
    }
    return max;
}